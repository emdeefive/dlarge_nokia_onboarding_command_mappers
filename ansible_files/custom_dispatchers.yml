custom_dispatchers:
         - platform: "nokia_sros"
           class: "NetmikoNokiaSros"
           config_command: null
           dispatcher_code: |
             @classmethod
             def get_command(cls, task: Task, logger, obj, command, **kwargs):
                logger.debug(f"Executing get_command for {task.host.name} on {task.host.platform}")
                host = task.host
                conn = ConnectHandler(
                      device_type=host.data["netmiko_driver"],
                      host=host.hostname,
                      username=host.username,
                      password=host.password,
                      secret=host.password
                      )

                output = conn.send_command("admin display-config")
                return Result(host=task.host, result={"output": {command: output}})
         - platform: "paloalto_panos"
           class: "NetmikoPaloAltoPanos"
           config_command: null
           dispatcher_code: |
             @classmethod
             def get_command(cls, task: Task, logger, obj, command, **kwargs):
                command = "show config effective-running"
                logger.debug(f"Executing get_command for {task.host.name} on {task.host.platform}")
                host = task.host
                conn = ConnectHandler(
                      device_type=host.data["netmiko_driver"],
                      host=host.hostname,
                      username=host.username,
                      password=host.password,
                      secret=host.password
                      )

                try:
                  check_pano = task.run(
                      task=netmiko_send_command,
                      command_string='show system info',
                  )
                  if check_pano[0].failed:
                    return check_pano
                  logger.debug(f"Config command var for {task.host.name} before if statement: {command}")
                  logger.debug(f"Output from 'show system info command' for {task.host.name}: {check_pano[0].result}")
                  if "panorama" in check_pano[0].result:
                    logger.debug(f"Config command var for {task.host.name} inside if statement before change: {command}")
                    command="show config running"
                    logger.debug(f"Config command var for {task.host.name} inside if statement after change: {command}")
                  extra = task.run(
                      task=netmiko_send_command,
                      command_string='set cli op-command-xml-output on',
                  )
                except NornirSubTaskError as exc:
                  error_msg = f"`E1020:` Session preparation failed. `{exc.result.exception}`"
                  logger.error(error_msg, extra={"object": obj})
                  raise NornirNautobotException(error_msg)

                logger.debug(f"Running config command for {task.host.name}: {command}")
                output = conn.send_command("command")
                return Result(host=task.host, result={"output": {command: output}})
         - platform: "fortinet"
           class: "NetmikoFortinet"
           config_command: null
           dispatcher_code: |
             @classmethod
             def get_command(cls, task: Task, logger, obj, command, **kwargs):
                logger.debug(f"Executing get_command for {task.host.name} on {task.host.platform}")
                host = task.host
                conn = ConnectHandler(
                      device_type=host.data["netmiko_driver"],
                      host=host.hostname,
                      username=host.username,
                      password=host.password,
                      secret=host.password
                      )

                output = conn.send_command("show")
                return Result(host=task.host, result={"output": {command: output}})