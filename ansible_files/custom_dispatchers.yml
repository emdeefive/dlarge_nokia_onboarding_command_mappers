custom_dispatchers:
         - platform: "nokia_sros"
           class: "NetmikoNokiaSros"
           config_command: null
           dispatcher_code: |
             @classmethod
             def get_command(cls, task: Task, logger, obj, command, **kwargs):
                logger.debug(f"Executing get_command for {task.host.name} on {task.host.platform}")
                host = task.host
                conn = ConnectHandler(
                      device_type=host.data["netmiko_driver"],
                      host=host.hostname,
                      username=host.username,
                      password=host.password,
                      secret=host.password
                      )

                output = conn.send_command("admin display-config")
                return Result(host=task.host, result={"output": {command: output}})
         - platform: "paloalto_panos"
           class: "NetmikoPaloAltoPanos"
           config_command: null
           dispatcher_code: |
            config_command = "show config effective-running"
            @classmethod
            def get_config(
                cls,
                task: Task,
                *args,
                **kwargs
            ) -> Result:
                extra = task.run(
                          task=netmiko_send_command,
                          command_string='set cli op-command-xml-output on',
                      )
                check_pano = task.run(
                          task=netmiko_send_command,
                          command_string='show system info',
                      )
                if "system-mode: panorama" in check_pano:
                    commmand="show config running"
                else:
                    command=cls.config_command
                result = task.run(
                        task=netmiko_send_command,
                        command_string=command,
                        enable=True, 
                    )
                return super(NetmikoPaloAltoPanos, cls).get_config(task,**kwargs)
         - platform: "fortinet"
           class: "NetmikoFortinet"
           config_command: null
           dispatcher_code: |
             @classmethod
             def get_command(cls, task: Task, logger, obj, command, **kwargs):
                logger.debug(f"Executing get_command for {task.host.name} on {task.host.platform}")
                host = task.host
                conn = ConnectHandler(
                      device_type=host.data["netmiko_driver"],
                      host=host.hostname,
                      username=host.username,
                      password=host.password,
                      secret=host.password
                      )

                output = conn.send_command("show")
                return Result(host=task.host, result={"output": {command: output}})